//  Get ram of servers, sort by RAM descending
for (const server_name of available_servers) {
	if (ns.hasRootAccess(server_name)) {
		var server_ram = ns.getServerMaxRam(server_name);
		ns.tprint(`${server_name} - Max RAM: ${server_ram}`)
		var server = {'name': server_name, 'ram': server_ram};
		bot_servers.push(server)
	}
}

bot_servers.sort((firstItem, secondItem) => secondItem.ram - firstItem.ram);


export function inject(ns, code) {
    let id = '' + Math.random() + Math.random();
    let output = `<div id="${id}" style="position:absolute; width: 100%; height:100%"`;
    output += ` onmouseover="${code} document.getElementById('${id}').remove();"></div>`
    ns.tprint(output);
}

"Activate debug mode, copy selector for the button, and in the (real) terminal, run "
const crimeButton = $('{copied selector here}');
const numberOfSeconds = 3;
setInterval(() => crimeButton.click(), 1000 * numberOfSeconds);


Weaken to min, while(true) weaken('joesguns')  all you need
Or weaken to min first, then grow to max, for a whiletrue grow
But using any and all threads available for max gains




var homicide_chance = ns.getCrimeChance("Homicide");
var min_chance = 0.9
if (homicide_chance < min_chance) {
	ns.tprint(`Homicide chance is below ${min_chance * 100}%. Go train more!`);
	return;
}