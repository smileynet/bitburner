/** @param {NS} ns **/

import {init_bot_server, wait_for_sufficient_money, current_hack_script, is_power_of_two, pow2ceil, get_available_servers} from "utils.ns";

export function get_highest_current_server_ram(ns) {
	var current_servers = ns.getPurchasedServers();
	var highest_current_server_ram = 0;
	for (const server_name of current_servers) {
		var current_server_ram = ns.getServerMaxRam(server_name)
		if (highest_current_server_ram < current_server_ram) {
			highest_current_server_ram = current_server_ram
		} 
	}
	return highest_current_server_ram;
}

export function get_lowest_current_server_ram(ns) {
	var current_servers = ns.getPurchasedServers();
	var lowest_current_server_ram = false;
	for (const server_name of current_servers) {
		var current_server_ram = ns.getServerMaxRam(server_name)
		if (lowest_current_server_ram == false || lowest_current_server_ram > current_server_ram) {
			lowest_current_server_ram = current_server_ram
		}
	}
	return lowest_current_server_ram;
}

export async function main(ns) {
    var current_ram_target = false;
	var current_script = await current_hack_script();
	var minimum_ram = ns.getScriptRam(current_script);
	
	var current_servers = ns.getPurchasedServers();
	var max_servers = ns.getPurchasedServerLimit();
	
	var ram_target_filename = "max_ram_target.txt"
	if (ns.fileExists(ram_target_filename)) {
		var max_ram_target = ns.read(ram_target_filename);
	} else {
		ns.alert("max_ram_target.txt does not exist!");
		var max_ram_target = 64 // To go for max: ns.getPurchasedServerMaxRam(); 
	}

	ns.tprint(`Max RAM target: ${max_ram_target}`);



	ns.disableLog("disableLog");
	ns.disableLog("getServerMaxRam");
	ns.disableLog("sleep");
	
	ns.print(current_servers);

	if (ns.args[0]){
		var loop_forever = false;
		current_ram_target = ns.args[0];
		if ( await is_power_of_two(current_ram_target) == false) {
			ns.tprint("RAM target is not a power of two!");
			return false;
		}

		if (current_ram_target < minimum_ram) {
			ns.tprint(`RAM target is below script minimum! Minimum RAM target: ${await pow2ceil(minimum_ram)}`);
			return false;
		}	
	} else {
		var loop_forever = true;
		current_ram_target = await pow2ceil(minimum_ram);

		ns.tprint(`Minimum RAM to run script: ${minimum_ram}, smaller server RAM possible: ${current_ram_target}`);
		var highest_current_server_ram = get_highest_current_server_ram(ns);
		var lowest_current_server_ram = get_lowest_current_server_ram(ns);

		ns.tprint(`Current highest server RAM: ${highest_current_server_ram}, current lowest: ${lowest_current_server_ram}`);
		if (highest_current_server_ram > current_ram_target){
			current_ram_target = highest_current_server_ram;
		}
		
		if ( current_ram_target > highest_current_server_ram) {
			ns.tprint(`Upgrading all servers to current RAM target: ${current_ram_target}`)
		} else if (highest_current_server_ram == lowest_current_server_ram) {
			current_ram_target = current_ram_target * 2;
			ns.tprint(`All servers at current RAM level, doubling RAM target to ${current_ram_target}.`)
		} else if (highest_current_server_ram > lowest_current_server_ram){
			current_ram_target = highest_current_server_ram;
			ns.tprint(`Setting target to highest current server RAM level: ${current_ram_target}.`)
		}
	}
	
	ns.tprint(`Current servers: ${current_servers.length}, max servers: ${max_servers}`)
	
	
	while(current_servers.length < max_servers) {
		ns.print(`Current number of servers: ${current_servers.length}, purchasing new server with ${current_ram_target} gb of RAM.`)
		var cost = ns.getPurchasedServerCost(current_ram_target);
		await wait_for_sufficient_money(ns, cost);
		var hostname = ns.purchaseServer("hackserv-" + (current_servers.length + 1), current_ram_target);
		await init_bot_server(ns, hostname);
		current_servers = ns.getPurchasedServers();
		ns.print(`Server purchased: ${hostname}, ram: ${current_ram_target}.`);
		ns.toast(`Server purchased: ${hostname}, ram: ${current_ram_target}.`);
		var available_servers = get_available_servers(ns);
		available_servers.push(hostname);
		await ns.write("available_servers.txt", available_servers, "w");
		await ns.sleep(100);
	}
	while (loop_forever && current_ram_target <= max_ram_target) {
		for(const server_name of current_servers) {
			var current_server_ram = ns.getServerMaxRam(server_name)
			if (current_server_ram < current_ram_target) {
				ns.print(`Server ${server_name} needs to be upgraded to ${current_ram_target} gb of RAM.`)
				var cost = ns.getPurchasedServerCost(current_ram_target);
				await wait_for_sufficient_money(ns, cost);
				ns.killall(server_name);
				ns.deleteServer(server_name);
				var hostname = ns.purchaseServer(server_name, current_ram_target);
				ns.print(`Hostname ${hostname} upgraded, ram: ${current_ram_target}.`)
				await init_bot_server(ns, hostname);
			}
		}

		ns.tprint(`Server purchase for RAM level ${current_ram_target} complete!`);
		ns.toast(`Server purchase for RAM level ${current_ram_target} complete!`);

		current_ram_target = current_ram_target * 2;
	}

	ns.tprint(`Server purchase has reached max RAM level! Quitting`);
	ns.toast(`Server purchase has reached max RAM level! Quitting`);
}